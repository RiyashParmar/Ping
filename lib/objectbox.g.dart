// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, non_constant_identifier_names

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/chatroom.dart';
import 'models/mydata.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 137882228962366263),
      name: 'MyData',
      lastPropertyId: const IdUid(9, 8603025469491943794),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1774233416149717352),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8594924299481238904),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3555516750381921838),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6032347312528973636),
            name: 'number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8982511168536223605),
            name: 'dp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6212861053980072403),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8603025469491943794),
            name: 'moments',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5147847693656154648),
      name: 'ChatRoom',
      lastPropertyId: const IdUid(9, 2923567943875169768),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8194189428397859112),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3886158016561034547),
            name: 'id_',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6042298206571899169),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4661410253864385473),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8014036400794019578),
            name: 'dp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3574259652433627072),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1043049070528980488),
            name: 'members',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8189554353924721795),
            name: 'msgs',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2923567943875169768),
            name: 'createdby',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8837877887753893006),
      name: 'User',
      lastPropertyId: const IdUid(8, 6490933787952573279),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5030131848850318915),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 26319744341141328),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3790095989607477968),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 650094118841827463),
            name: 'number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2626419948491849484),
            name: 'dp',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6621172348923105318),
            name: 'bio',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6133710166188197426),
            name: 'msgs',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6490933787952573279),
            name: 'moments',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 8837877887753893006),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        2529737505430594227,
        1736171475137131235,
        1979140730650568826,
        4116668147568613511
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4132624660556562783,
        6898143276628784945,
        5875467564714644569,
        2790795226311760842,
        3461403675651227649,
        4656417647586129766,
        537733149514827918,
        9180284599697564024,
        471425390301223389,
        915716529212546123,
        4855739955767200964,
        1308141122150149321,
        5838454244509761972,
        5430010632466384042,
        7364834502381969994,
        6409588405973026600,
        8074424862602703055,
        4629095261072005128,
        1246076187004554980,
        5596146333900674251,
        3026084147262803459,
        2046263894883849019,
        4299327684980699221,
        801472341968936141,
        3428497487848416391,
        5141741562019044593,
        1519092274942235645,
        1273229301186796737,
        860570594337502575,
        3544147663004182611,
        3473864133415263830,
        2786573472425683814,
        1283691664392147431,
        1444937317429016609,
        5831298535117630723,
        752043638558760244
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    MyData: EntityDefinition<MyData>(
        model: _entities[0],
        toOneRelations: (MyData object) => [],
        toManyRelations: (MyData object) => {},
        getId: (MyData object) => object.id,
        setId: (MyData object, int id) {
          object.id = id;
        },
        objectToFB: (MyData object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final nameOffset = fbb.writeString(object.name);
          final numberOffset = fbb.writeString(object.number);
          final dpOffset = fbb.writeString(object.dp);
          final bioOffset = fbb.writeString(object.bio);
          final momentsOffset = fbb.writeList(
              object.moments.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, numberOffset);
          fbb.addOffset(4, dpOffset);
          fbb.addOffset(5, bioOffset);
          fbb.addOffset(8, momentsOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MyData(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              dp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              bio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              moments: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 20, []));

          return object;
        }),
    ChatRoom: EntityDefinition<ChatRoom>(
        model: _entities[1],
        toOneRelations: (ChatRoom object) => [],
        toManyRelations: (ChatRoom object) => {},
        getId: (ChatRoom object) => object.id,
        setId: (ChatRoom object, int id) {
          object.id = id;
        },
        objectToFB: (ChatRoom object, fb.Builder fbb) {
          final id_Offset = fbb.writeString(object.id_);
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          final dpOffset = fbb.writeString(object.dp);
          final descriptionOffset = fbb.writeString(object.description);
          final membersOffset = fbb.writeList(
              object.members.map(fbb.writeString).toList(growable: false));
          final msgsOffset = fbb.writeList(
              object.msgs.map(fbb.writeString).toList(growable: false));
          final createdbyOffset = fbb.writeString(object.createdby);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, id_Offset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, dpOffset);
          fbb.addOffset(5, descriptionOffset);
          fbb.addOffset(6, membersOffset);
          fbb.addOffset(7, msgsOffset);
          fbb.addOffset(8, createdbyOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ChatRoom(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              id_: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              type: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              createdby: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              dp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              members:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 16, []),
              msgs: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 18, []));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final nameOffset = fbb.writeString(object.name);
          final numberOffset = fbb.writeString(object.number);
          final dpOffset = fbb.writeString(object.dp);
          final bioOffset = fbb.writeString(object.bio);
          final msgsOffset = fbb.writeList(
              object.msgs.map(fbb.writeString).toList(growable: false));
          final momentsOffset = fbb.writeList(
              object.moments.map(fbb.writeString).toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, numberOffset);
          fbb.addOffset(4, dpOffset);
          fbb.addOffset(5, bioOffset);
          fbb.addOffset(6, msgsOffset);
          fbb.addOffset(7, momentsOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              dp: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              bio: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              msgs: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                  .vTableGet(buffer, rootOffset, 16, []),
              moments:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 18, []));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [MyData] entity fields to define ObjectBox queries.
class MyData_ {
  /// see [MyData.id]
  static final id = QueryIntegerProperty<MyData>(_entities[0].properties[0]);

  /// see [MyData.username]
  static final username =
      QueryStringProperty<MyData>(_entities[0].properties[1]);

  /// see [MyData.name]
  static final name = QueryStringProperty<MyData>(_entities[0].properties[2]);

  /// see [MyData.number]
  static final number = QueryStringProperty<MyData>(_entities[0].properties[3]);

  /// see [MyData.dp]
  static final dp = QueryStringProperty<MyData>(_entities[0].properties[4]);

  /// see [MyData.bio]
  static final bio = QueryStringProperty<MyData>(_entities[0].properties[5]);

  /// see [MyData.moments]
  static final moments =
      QueryStringVectorProperty<MyData>(_entities[0].properties[6]);
}

/// [ChatRoom] entity fields to define ObjectBox queries.
class ChatRoom_ {
  /// see [ChatRoom.id]
  static final id = QueryIntegerProperty<ChatRoom>(_entities[1].properties[0]);

  /// see [ChatRoom.id_]
  static final id_ = QueryStringProperty<ChatRoom>(_entities[1].properties[1]);

  /// see [ChatRoom.name]
  static final name = QueryStringProperty<ChatRoom>(_entities[1].properties[2]);

  /// see [ChatRoom.type]
  static final type = QueryStringProperty<ChatRoom>(_entities[1].properties[3]);

  /// see [ChatRoom.dp]
  static final dp = QueryStringProperty<ChatRoom>(_entities[1].properties[4]);

  /// see [ChatRoom.description]
  static final description =
      QueryStringProperty<ChatRoom>(_entities[1].properties[5]);

  /// see [ChatRoom.members]
  static final members =
      QueryStringVectorProperty<ChatRoom>(_entities[1].properties[6]);

  /// see [ChatRoom.msgs]
  static final msgs =
      QueryStringVectorProperty<ChatRoom>(_entities[1].properties[7]);

  /// see [ChatRoom.createdby]
  static final createdby =
      QueryStringProperty<ChatRoom>(_entities[1].properties[8]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// see [User.username]
  static final username = QueryStringProperty<User>(_entities[2].properties[1]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[2].properties[2]);

  /// see [User.number]
  static final number = QueryStringProperty<User>(_entities[2].properties[3]);

  /// see [User.dp]
  static final dp = QueryStringProperty<User>(_entities[2].properties[4]);

  /// see [User.bio]
  static final bio = QueryStringProperty<User>(_entities[2].properties[5]);

  /// see [User.msgs]
  static final msgs =
      QueryStringVectorProperty<User>(_entities[2].properties[6]);

  /// see [User.moments]
  static final moments =
      QueryStringVectorProperty<User>(_entities[2].properties[7]);
}
